<apex:page tabStyle="SBQQ__Quote__c" doctype="html-5.0" showHeader="{!(!$Setup.GeneralSettings__c.GlobalHeaderPermUsed__c || !$Permission.SBQQ__HideGlobalHeader) && formFactor == 'desktop'}" standardstylesheets="false" controller="SBQQ.ServiceRouter" extensions="SBQQ.OAuthExtension,SBQQ.SettingsExtension">
	<script>if( document.head.createShadowRoot ) Polymer = {dom: 'shadow'};</script>
	<apex:includeScript value="{!$Resource.SBQQ__sb_app_3rd_js}"/>
	<apex:includeScript value="{!$Resource.SBQQ__JSQC}"/>

	<div id="pw" class="sbPleaseWait" style="display:none">{!$Label.lbl_please_wait}</div>
	<script>
		var pleaseWait;
		if((navigator.userAgent.match(/Tablet|iPad|iPod/i) && !navigator.userAgent.match(/Tablet PC/i)) || (navigator.userAgent.match(/Android/i) && !navigator.userAgent.match(/Mobi/i))) {
			document.querySelector('#pw').style.display = 'block';
		} else {
			pleaseWait = setTimeout(function() {
				document.querySelector('#pw').style.display = 'block';
			}, 1000);
		}
	</script>
	<sb-page-container id="sbPageContainer"></sb-page-container>
	<div id="sb-app"></div>

	<style>
	body {
		overflow: hidden;
	}

	#bodyCell {
		position: relative;
		overflow: hidden;
		padding: 0px;
		display: inline-block;
		width: 100%;
		min-height: 500px;
	}

	#sidebarCell.sidebarCollapsed {
		padding-left: 0;
		width:1px;
	}
	.noSidebarCell.noSidebarCell {
        padding: 0;
    }
	#MoreTabs_Tab > #MoreTabs_List {
		z-index: 10;  // must be larger than fixed page header (tab overflow dropdown)
	}

	.sbPleaseWait{
		font-family: 'Salesforce Sans', 'Open Sans', Arial, sans-serif;
		font-size: 1.3rem;
		font-weight: 300;
		left: 0;
		line-height: 200px;
		margin-top: -100px;
		position: absolute;
		text-align: center;
		top: 50%;
		width: 100%;
	}

	iron-dropdown > #contentWrapper {
		min-width: 0;
	}

	</style>

	<script>
	(function( window ) {
		window.sb = window.sb || {};
		window.sb.vfSessionId = '{!$API.Session_Id}';
		window.sb.labels = <c:sb_labels />;
		escapeLabelKeys();

		window.addEventListener("load", function() {
			adjustBody();
		});


		window.addEventListener("resize", function() {
			adjustBody();
		});

		function adjustBody() {
			var bodyCell = document.querySelector('#bodyCell');
			if(bodyCell) {
				var heightOffset = document.querySelector('#globalHeaderBar') ? 166 : 130;
				var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
				bodyCell.style.minHeight = (height - heightOffset) + 'px';
				var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
				bodyCell.style.maxWidth = (width - 12) + 'px';
			}
		}

        // Need to escape the keys in labels map
		// Sb-i18n uses this.innerHTML which returns escaped characters when getting text to translate
        function escapeLabelKeys() {
			for(var labelKey in window.sb.labels) {
				if(labelKey.includes('&') || labelKey.includes('<') || labelKey.includes('>')) {
                    var escapedLabelKey = labelKey.replace(/&/g, '&amp' + ';').replace(/</g, '&lt' + ';').replace(/>/g, '&gt'  + ';');
                    window.sb.labels[escapedLabelKey] = window.sb.labels[labelKey];
                    delete window.sb.labels[labelKey];
				}
			}
        }

		var wcReady = new Promise( function( res, rej ) {
			var ok = false;
			window.addEventListener( 'WebComponentsReady', function(e) { ok = true; res(''); } );
			setTimeout( function() { if( !ok ) rej(); }, 10000 );
		});

		function get( u ) {
			return new Promise( function( resolve, reject ) {
				var req = new XMLHttpRequest();
				req.open( 'GET', u );

				req.onload = function() {
					if( [200,304].indexOf( req.status ) >= 0 )
						resolve( req.responseText );
					else
						reject( new Error( req.statusText ) );
				};
				req.onerror = function() {
					reject( new Error( req.statusText ) );
				};
				req.send();
			});
		}

		function evalJs( js ) {
			var s = document.createElement( 'script' );
			s.text = js;
			document.head.appendChild( s ); //.parentNode.removeChild( s );
		}

		// map of urls to 3rd parties on filesystem not included in HTML import or ES6 import
		var libUrls = {
			intl: '{!URLFOR($Resource.sb_i18n_cldr)}',
			tinymce: '{!URLFOR($Resource.sb_tinymce)}'
		};

		Promise.all( [get( '{!$Resource.sb_app_html}' ), get( '{!$Resource.sb_app_js}' ), wcReady] ).then( function( results ) {
			var e = document.querySelector( '#sb-app' );
			if( !results[0] || e.nodeType !== 1 )
				return;

			e.innerHTML = results[0];
			var scripts = e.querySelectorAll( 'script' ), len = scripts ? scripts.length : 0;

			for( var i=0; i < len; i++ )
				evalJs( scripts[i].textContent.replace( /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, '' ) );

			evalJs( results[1] );

			System.import( 'app.js' ).then( function( mod ) {
				mod.App.init( document.querySelector( '#sbPageContainer' ), null, {!usersettings}, libUrls ).then( function() {

					if(pleaseWait)
						clearTimeout(pleaseWait);

					// the default page to land the user on
					var HOME = '/product/search';
					document.querySelector('body').removeAttribute( 'unresolved' );

					// clear the hash so in aloha you can refresh the page by reloading the URL
					var previous = window.location.hash;
					window.location.hash = '';

					var route = window.location.hash.length > 1 ? window.location.hash.slice(1) : (previous || getLineEditorRoute() || HOME);
					document.querySelector( '#sbPageContainer' ).route =  route;
					document.querySelector('#pw').style.display = 'none';

					function getLineEditorRoute() {
						var quoteId = '{!JSENCODE($CurrentPage.parameters.id)}' == '' ? '{!JSENCODE($CurrentPage.parameters.newid)}' : '{!JSENCODE($CurrentPage.parameters.id)}';
						var cmd = '{!JSENCODE($CurrentPage.parameters.cmd)}' == '' ? '' : '&cmd={!JSENCODE($CurrentPage.parameters.cmd)}';
						return quoteId ? 'quote/le?qId=' + quoteId + cmd: null;
					}
				});
			})
			.catch( function(err) { console.error(err); console.log( err.originalErr ) } );

		});
	})( window );
	</script>

	<c:themeStyles />
</apex:page>